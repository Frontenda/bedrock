//- Globally expose mixins without output, needed for prototypes
include ../../../core/templates/mixins/icon
include ../../../core/templates/mixins/render-page-tree
include ../../../core/templates/mixins/sample
include ../../../core/templates/mixins/styleguide-settings
include ../../../core/templates/mixins/languages

block pageVariables
    //- Use this block to append page variables in templates
    - var projectTitle = "Bedrock + Material Design"
    - var htmlClass = ""
    - var bodyClass = "mdc-typography"

block styleguideSettings
    //- Styleguide layout system
    //- Use your project's layout system for the style guide
    
    //- Styleguide classes - Buttons
    //- Style buttons like your project's buttons
    - var styleguideButtonClass = "mdc-button"

    //-
        Styleguide classes - Headings
        Style headings in styleguide like your project's headings
    - var styleguideBrandClass = "mdc-typography--headline4"
    - var styleguideComponentGroupHeaderClass = "mdc-typography--headline4"
    - var styleguideSampleHeadingClass = "mdc-typography--headline5"
    - var styleguideComponentListingCategoryClass = "mdc-typography--headline6"

    - var styleguideNavListTitleClass = "mdc-typography--headline6"
    - var styleguideNavListClass = "mdc-list mdc-list--dense"
    - var styleguideSampleClass = ""

    - var styleguideNavListItemClass = "mdc-list-item"
    - var styleguideNavListItemActiveClass = "mdc-list-item--selected"

    - var styleguideNavListItemLinkClass = "mdc-list-item__text"
    - var styleguideNavListItemLinkActiveClass = ""

    - var styleguideNavigationHolderClass = ""

doctype html
html(dir="ltr" lang="en" class=htmlClass ? htmlClass : '')
    head
        meta(charset='UTF-8')
        meta(name="viewport", content="width=device-width, initial-scale=1")
        meta(name="robots", content="noindex")

        title
            if moduleTitle
                | #{moduleTitle} - #{projectTitle}
            else
                | #{projectTitle}

        link(rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons")
        link(rel='stylesheet', href='/css/main.css')
        link(rel='stylesheet', href='/css/prototype.css')
        link(rel='stylesheet', href='/css/styleguide.css')

        script.
           /**
            * @license
            * Copyright 2017 Google Inc. All Rights Reserved.
            *
            * Licensed under the Apache License, Version 2.0 (the "License");
            * you may not use this file except in compliance with the License.
            * You may obtain a copy of the License at
            *
            *      http://www.apache.org/licenses/LICENSE-2.0
            *
            * Unless required by applicable law or agreed to in writing, software
            * distributed under the License is distributed on an "AS IS" BASIS,
            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            * See the License for the specific language governing permissions and
            * limitations under the License.
            */

           /**
            * Adds the given event handler to the queue. It will be executed asynchronously after all external JS and CSS resources
            * have finished loading (as determined by continuous long-polling with a timeout). If this function is called after all
            * resources have finished loading, the given handler function will be invoked synchronously (in the same call stack).
            * Handlers are invoked in FIFO order.
            * @param {function(!Document|!Element) : undefined} handler
            */
           window.demoReady = (function(root) {
             var POLL_INTERVAL_MS = 100;
             var POLL_MAX_WAIT_MS = 60 * 1000;

             var isReadyCached = false;
             var isDomLoaded = false;
             var handlers = [];
             var testDom = null;
             var startTimeMs = null;
             var pollTimer = null;

             function isReady() {
               if (isReadyCached) {
                 return true;
               }
               ensureDetectionDom();
               isReadyCached = getComputedStyle(testDom).position === 'relative' &&
                 (Boolean(window.mdc) || (isDomLoaded && !root.querySelector('script[src*="material-components-web.js"]')));
               return isReadyCached;
             }

             function ensureDetectionDom() {
               if (testDom) {
                 return;
               }
               testDom = document.createElement('div');
               testDom.classList.add('demo-ready-detect');
               document.body.appendChild(testDom);
             }

             function removeDetectionDom() {
               if (!testDom) {
                 return;
               }
               document.body.removeChild(testDom);
               testDom = null;
             }

             function startTimer() {
               if (pollTimer) {
                 return;
               }
               startTimeMs = Date.now();
               pollTimer = setInterval(tick, POLL_INTERVAL_MS);
               window.addEventListener('load', function() {
                 tick();
               });
             }

             function tick() {
               if (isReady()) {
                 clearInterval(pollTimer);
                 removeDetectionDom();
                 invokeHandlers();
                 return;
               }

               var elapsedTimeMs = Date.now() - startTimeMs;
               if (elapsedTimeMs > POLL_MAX_WAIT_MS) {
                 clearInterval(pollTimer);
                 removeDetectionDom();
                 console.error('Timed out waiting for JS and CSS to load after ' + POLL_MAX_WAIT_MS + ' ms');
                 return;
               }
             }

             function invokeHandlers() {
               handlers.forEach(function(handler) {
                 handler(root);
               });
               handlers.length = 0;
             }

             root.addEventListener('DOMContentLoaded', function() {
               isDomLoaded = true;
             });

             return function addHandler(handler) {
               if (isReady()) {
                 handler(root);
                 return;
               }
               handlers.push(handler);
               startTimer();
             };
           })(document);

    body(class=bodyClass ? bodyClass : '')

        block body

        include ../../../core/templates/includes/prototype-nav

        = "\n"
        script(src='/js/bundle.js')
        script(src="/resources/material-components-web.js")
        script.
            mdc.autoInit()
        
        block scripts
            // nothing
